datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Profile {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  description     String   @db.String
  profileImageUrl String   @db.String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now())
  accountId       String   @db.ObjectId
  Account         Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
}

model Account {
  id        String   @id @default(auto())  @map("_id") @db.ObjectId
  userId    String  
  email     String   @unique
  username  String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  Resume       Resume[]
  Subscription Subscription[]
  Profile      Profile[]
  credits   Int @default(5)

  @@index([userId])
  @@index([username])
}

model Subscription {
  id                     String    @id @default(auto())  @map("_id") @db.ObjectId
  stripeCustomerId       String?   @unique
  stripeSubscriptionId   String?   @unique
  stripeCurrentPeriodEnd DateTime?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @default(now())
  accountId              String   @db.ObjectId @unique
  Account                Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
}

model Resume {
  id            String   @id @default(auto())  @map("_id") @db.ObjectId
  name          String
  slug          String?
  description   String
  generatedJSON String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
  default       Boolean  @default(false)
  accountId     String   @db.ObjectId
  Account       Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@unique([slug])
}
